name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
    build:
      runs-on: windows-latest
      steps:
        - name: checkout repo 
          uses: actions/checkout@v2
        - name: setup dotnet 
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: '6.0.x'
        - name: Add msbuild to PATH
          uses: microsoft/setup-msbuild@v1.1
          with:
            msbuild-architecture: x64
        - name: Set up JDK 11
          uses: actions/setup-java@v1
          with:
            java-version: 1.11
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        - name: Cache SonarCloud packages
          uses: actions/cache@v1
          with:
            path: ~\sonar\cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
        - name: Cache SonarCloud scanner
          id: cache-sonar-scanner
          uses: actions/cache@v1
          with:
            path: .\.sonar\scanner
            key: ${{ runner.os }}-sonar-scanner
            restore-keys: ${{ runner.os }}-sonar-scanner
        - name: Install SonarCloud scanner
          if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
          shell: powershell
          run: |
            New-Item -Path .\.sonar\scanner -ItemType Directory
            dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
        - run: "nuget restore ${env:GITHUB_WORKSPACE}\\cs-windows-firewall-bouncer.sln"
        - name: Build release bouncer
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          shell: powershell
          run: |
            .\.sonar\scanner\dotnet-sonarscanner begin /k:"crowdsecurity_cs-windows-firewall-bouncer" /o:"crowdsecurity" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
            msbuild ${env:GITHUB_WORKSPACE}\\cs-windows-firewall-bouncer.sln -t:cs-windows-firewall-bouncer:rebuild -property:Configuration=Release
            .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        #FIXME: when it is working move everything to release only, we don't want to allow people to sign arbitrary binaries with our CI :) 
        - name: Install SignClient
          shell: powershell
          run: dotnet tool install --global SignClient --version 1.3.155
        - name: Generate appconfig.json
          shell: powershell
          env:
            APPCONFIG_JSON: ${{ secrets.APPCONFIG_JSON_B64 }}
          run: |
            $appconfig = Join-Path -Path $env:RUNNER_TEMP -ChildPath "appconfig.json"; 
            $encodedBytes = [System.Convert]::FromBase64String($env:APPCONFIG_JSON); 
            Set-Content $appconfig -Value $encodedBytes -Encoding Byte;
            Write-Output "::set-output name=APPCONFIG_JSON::$appconfig";
        - name: Sign bouncer
          run: SignClient.exe Sign --name "windows-firewall-bouncer.exe" --baseDirectory ${env:GITHUB_WORKSPACE}\\cs-windows-firewall-bouncer\\bin\\x64\\Release\\net6.0-windows --input "**\\*.{exe,dll}" --config (Join-Path -Path $env:RUNNER_TEMP -ChildPath "appconfig.json") --user ${{ secrets.SIGNING_CLIENT_USER }} --secret '${{ secrets.SIGNING_CLIENT_SECRET }}'
        - name: Build installers
          run: msbuild ${env:GITHUB_WORKSPACE}\\cs-windows-firewall-bouncer.sln -t:cs-windows-firewall-installer-bundle -property:Configuration=Release
        - name: Sign MSI
          run: SignClient.exe Sign --name "windows-firewall-bouncer.msi" --baseDirectory ${env:GITHUB_WORKSPACE}\\cs-windows-firewall-bouncer-setup\\bin\\x64\\Release\\ --input "**\\*.msi" --config (Join-Path -Path $env:RUNNER_TEMP -ChildPath "appconfig.json") --user ${{ secrets.SIGNING_CLIENT_USER }} --secret '${{ secrets.SIGNING_CLIENT_SECRET }}'
        - name: Sign Bundle
          run: SignClient.exe Sign --name "windows-firewall-bouncer-bundle.exe" --baseDirectory ${env:GITHUB_WORKSPACE}\\cs-windows-firewall-installer-bundle\\bin\\Release\\ --input "**\\*.exe" --config (Join-Path -Path $env:RUNNER_TEMP -ChildPath "appconfig.json") --user ${{ secrets.SIGNING_CLIENT_USER }} --secret '${{ secrets.SIGNING_CLIENT_SECRET }}'
        - name: Upload MSI
          uses: actions/upload-artifact@v2
          with:
            path: "cs-windows-firewall-bouncer-setup\\bin\\x64\\Release\\cs_windows_firewall_bouncer_setup.msi"
            name: cs_windows_firewall_bouncer.msi
        - name: Upload Bundle
          uses: actions/upload-artifact@v2
          with:
            path: "cs-windows-firewall-installer-bundle\\bin\\Release\\cs_windows_firewall_installer_bundle.exe"
            name: cs_windows_firewall_installer_bundle.exe